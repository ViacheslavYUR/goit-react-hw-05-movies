{"version":3,"file":"static/js/821.cbf619a1.chunk.js","mappings":"kSAEaA,EAAaC,EAAAA,GAAAA,GAAH,mFAMVC,EAAkBD,EAAAA,GAAAA,GAAH,iE,SCCtBE,EAAiB,WACrB,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,kHAEIC,EAAAA,EAAAA,IAAaJ,GAFjB,gBAEdK,EAFc,EAEdA,QACRR,EAAWQ,GAHW,gDAIbC,EAJa,KAIbA,SACTP,GAAS,GACTQ,QAAQC,IAAIF,EAASG,KAAKC,SANJ,yDAAH,qDASvBP,EAAkBH,EACnB,GAAE,CAACA,KAGF,gCACGF,IAAS,SAACa,EAAA,QAAD,IACTf,EAAQgB,QACP,SAACrB,EAAD,UACGK,EAAQiB,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,yBACE,4BACE,SAACvB,EAAD,UAAkBsB,KAClB,uBAAIC,QAHCF,EADE,OAUf,wCAIP,EAEDpB,EAAeuB,aAAe,GAQ9B,O,2CCpDA,UAJqB,WACnB,OAAO,oEACR,C,yLCAKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAMC,GAAN,+EACT,QACL,OAFc,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADV,OACU,iBAAoDD,IAHhD,uBAGnBf,EAHmB,EAGnBA,KAHmB,kBAIpBA,GAJoB,2CAAH,sDAObiB,EAAW,mCAAG,WAAOF,EAAMG,GAAb,yFACFT,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDG,IAD/C,uBACjBlB,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAKXmB,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASO,IAAT,iBAAuBI,IADlB,uBACpBpB,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdqB,EAAY,mCAAG,WAAM9B,GAAN,yFACHkB,EAASO,IAAT,iBAAuBzB,EAAvB,aADG,uBAClBS,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZL,EAAY,mCAAG,WAAMyB,GAAN,yFACHX,EAASO,IAAT,iBAAuBI,EAAvB,aADG,uBAClBpB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/MovieReviewers/MovieRewiewers.styled.js","components/MovieReviewers/MovieRewiewers.jsx","pages/NotFound/NotFoundPage.jsx","shared/services/fetch-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n`;\n\nexport const ReviewAutorName = styled.h2`\n  font-size: 18px;\n  font-weight: 700;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nimport NotFoundPage from 'pages/NotFound/NotFoundPage';\nimport { fetchReviews } from 'shared/services/fetch-api';\n\nimport { ReviewList, ReviewAutorName } from './MovieRewiewers.styled';\n\nconst MovieRewiewers = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchMovieReviews = async () => {\n      try {\n        const { results } = await fetchReviews(movieId);\n        setReviews(results);\n      } catch ({ response }) {\n        setError(true);\n        console.log(response.data.message);\n      }\n    };\n    fetchMovieReviews(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <NotFoundPage />}\n      {reviews.length ? (\n        <ReviewList>\n          {reviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <div>\n                <ReviewAutorName>{author}</ReviewAutorName>\n                <p>{content}</p>\n              </div>\n            </li>\n          ))}\n        </ReviewList>\n      ) : (\n        <p>No results</p>\n      )}\n    </>\n  );\n};\n\nMovieRewiewers.defaultProps = [];\n\nMovieRewiewers.propTypes = {\n  id: PropTypes.number,\n  autor: PropTypes.string,\n  content: PropTypes.string,\n};\n\nexport default MovieRewiewers;\n","const NotFoundPage = () => {\n  return <h1>Not found page, please check URL address</h1>;\n};\n\nexport default NotFoundPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '2134d13c1835ef13ec8cd549d2172bad',\n  },\n});\n\nexport const fetchTrending = async page => {\n  const mediaType = 'movie';\n  const time = 'week';\n  const { data } = await instance.get(`/trending/${mediaType}/${time}?page=${page}`);\n  return data;\n};\n\nexport const fetchMovies = async (page, query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n"],"names":["ReviewList","styled","ReviewAutorName","MovieRewiewers","useState","reviews","setReviews","error","setError","movieId","useParams","useEffect","fetchMovieReviews","fetchReviews","results","response","console","log","data","message","NotFoundPage","length","map","id","author","content","defaultProps","instance","axios","baseURL","params","api_key","fetchTrending","page","get","fetchMovies","query","fetchMovieById","movieID","fetchCredits"],"sourceRoot":""}