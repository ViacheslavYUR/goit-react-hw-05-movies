{"version":3,"file":"static/js/387.ad9a80be.chunk.js","mappings":"oSAEaA,EAAWC,EAAAA,GAAAA,GAAH,2HAORC,EAAWD,EAAAA,GAAAA,GAAH,uGAKRE,EAAYF,EAAAA,GAAAA,IAAH,mG,SC4CtB,EAlDkB,WAChB,OAAkCG,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAeR,OAbAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,kHAESC,EAAAA,EAAAA,IAAaJ,GAFtB,gBAENK,EAFM,EAENA,KACRR,EAAaQ,GAHC,gDAILC,EAJK,KAILA,SACTP,GAAS,GACTQ,QAAQC,IAAIF,EAASG,KAAKC,SANZ,yDAAH,qDASfP,EAAUH,EACX,GAAE,CAACA,KAGF,gCACGF,IAAS,SAACa,EAAA,QAAD,IACTf,EAAUgB,QACT,SAACrB,EAAD,UACGK,EAAUiB,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAC/B,UAACtB,EAAD,YACE,gBACEuB,IACED,EAAME,aAAN,0CACuCF,EAAME,cAD7C,kCAIFC,IAAG,UAAKH,EAAMI,SAEhB,UAACzB,EAAD,YACE,uBAAIqB,EAAMI,QACV,uCAEE,0BAAOJ,EAAMK,oBAbJL,EAAMM,QADU,OAqBnC,wCAIP,C,2CCpDD,UAJqB,WACnB,OAAO,oEACR,C,yLCAKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAMC,GAAN,+EACT,QACL,OAFc,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADV,OACU,iBAAoDD,IAHhD,uBAGnBnB,EAHmB,EAGnBA,KAHmB,kBAIpBA,GAJoB,2CAAH,sDAObqB,EAAW,mCAAG,WAAOF,EAAMG,GAAb,yFACFT,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDG,IAD/C,uBACjBtB,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAKXuB,EAAc,mCAAG,WAAMC,GAAN,yFACLX,EAASO,IAAT,iBAAuBI,IADlB,uBACpBxB,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdL,EAAY,mCAAG,WAAMJ,GAAN,yFACHsB,EAASO,IAAT,iBAAuB7B,EAAvB,aADG,uBAClBS,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZyB,EAAY,mCAAG,WAAMD,GAAN,yFACHX,EAASO,IAAT,iBAAuBI,EAAvB,aADG,uBAClBxB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","pages/NotFound/NotFoundPage.jsx","shared/services/fetch-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  row-gap: 15px;\n  column-gap: 10px;\n`;\n\nexport const CastItem = styled.li`\n  border: 1px solid #a9a9a9;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n`;\n\nexport const ActorWrap = styled.div`\n  padding: 5px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NotFoundPage from 'pages/NotFound/NotFoundPage';\nimport { fetchCredits } from 'shared/services/fetch-api';\n\nimport { CastList, CastItem, ActorWrap } from './Cast.styled';\n\nconst MovieCast = () => {\n  const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchCredits(movieId);\n        setMovieCast(cast);\n      } catch ({ response }) {\n        setError(true);\n        console.log(response.data.message);\n      }\n    };\n    fetchCast(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {error && <NotFoundPage />}\n      {movieCast.length ? (\n        <CastList>\n          {movieCast.slice(0, 12).map(actor => (\n            <CastItem key={actor.cast_id}>\n              <img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${actor.profile_path}`\n                    : `https://via.placeholder.com/200`\n                }\n                alt={`${actor.name}`}\n              />\n              <ActorWrap>\n                <p>{actor.name}</p>\n                <p>\n                  Character:\n                  <span>{actor.character}</span>\n                </p>\n              </ActorWrap>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <p>No results</p>\n      )}\n    </>\n  );\n};\n\nexport default MovieCast;\n","const NotFoundPage = () => {\n  return <h1>Not found page, please check URL address</h1>;\n};\n\nexport default NotFoundPage;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '2134d13c1835ef13ec8cd549d2172bad',\n  },\n});\n\nexport const fetchTrending = async page => {\n  const mediaType = 'movie';\n  const time = 'week';\n  const { data } = await instance.get(`/trending/${mediaType}/${time}?page=${page}`);\n  return data;\n};\n\nexport const fetchMovies = async (page, query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchMovieById = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async movieId => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async movieID => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n"],"names":["CastList","styled","CastItem","ActorWrap","useState","movieCast","setMovieCast","error","setError","movieId","useParams","useEffect","fetchCast","fetchCredits","cast","response","console","log","data","message","NotFoundPage","length","slice","map","actor","src","profile_path","alt","name","character","cast_id","instance","axios","baseURL","params","api_key","fetchTrending","page","get","fetchMovies","query","fetchMovieById","movieID","fetchReviews"],"sourceRoot":""}